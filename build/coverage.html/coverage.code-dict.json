{"/home/travis/build/npmtest/node-npmtest-plato/test.js":"/* istanbul instrument in package npmtest_plato */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-plato/lib.npmtest_plato.js":"/* istanbul instrument in package npmtest_plato */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_plato = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_plato = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-plato/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-plato && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_plato */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_plato\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_plato.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_plato.rollup.js'] =\n            local.assetsDict['/assets.npmtest_plato.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_plato.__dirname + '/lib.npmtest_plato.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-plato/node_modules/plato/lib/plato.js":"/*\n * plato\n * https://github.com/es-analysis/plato\n *\n * Copyright (c) 2012 Jarrod Overson\n * Licensed under the MIT license.\n */\n\n'use strict';\n\n// node api\nvar path = require('path');\n\n// node api with sugar\nvar fs = require('fs-extra');\n\n// vendor\nvar _ = require('lodash');\nvar glob = require('glob');\n\n// local lib\nvar util = require('./util'),\n    OverviewHistory = require('./models/OverviewHistory'),\n    FileHistory = require('./models/FileHistory'),\n    Logger = require('./logger'),\n    reporters = {\n      complexity : require('./reporters/complexity'),\n      jshint : require('./reporters/jshint'),\n      eslint : require('./reporters/eslint')\n    };\n\nvar overviewTemplate = __dirname + '/templates/overview.html',\n    displayTemplate = __dirname + '/templates/display.html',\n    fileTemplate = __dirname + '/templates/file.html',\n    assets = __dirname + '/assets/',\n    fileDir = 'files';\n\nvar log = new Logger(Logger.WARNING);\n\nfunction unary(fn) { return function(a){ return fn(a);}; }\n\nexports.inspect = function(files, outputDir, options, done) {\n\n\tif (!files) {\n\t  // at least give me a file man...\n\t  return;\n\t}\n\n  files = files instanceof Array ? files : [files];\n  files = _.flatten(files.map(unary(glob.sync)));\n\n  var flags = {\n    complexity : {\n      commonjs : true,\n      logicalor : true,\n      switchcase : true,\n      forin : false,\n      trycatch : false,\n      newmi : true\n    },\n    jshint : {} // use jshint defaults\n  };\n\n  if (options.eslint) {\n    options.jshint = options.eslint;\n    reporters.jshint = reporters.eslint;\n    delete options.eslint;\n    delete reporters.eslint;\n  }\n\n  Object.keys(flags).forEach(function(flag){\n    if (flag in options) flags[flag] = _.clone(options[flag]);\n  });\n\n  if (options.q) log.level = Logger.ERROR;\n\n  if (options.date) {\n    // if we think we were given seconds\n    if (options.date < 10000000000 ) options.date = options.date * 1000;\n    options.date = new Date(options.date);\n  }\n\n  var reports = [];\n\n  var fileOutputDir = outputDir ? path.join(outputDir, fileDir) : false;\n\n  var commonBasePath = util.findCommonBase(files);\n\n  var runReports = function(files, done) {\n    files.forEach(function(file) {\n      if (options.exclude && options.exclude.test(file)) return;\n\n      if (options.recurse && fs.statSync(file).isDirectory()) {\n        files = fs.readdirSync(file).map(function(innerFile) {\n          return path.join(file,innerFile);\n        });\n        runReports(files);\n      } else if (file.match(/\\.js$/)) {\n        log.info('Reading \"%s\"', file);\n\n        var fileShort = file.replace(commonBasePath, '');\n        var fileSafe = fileShort.replace(/[^a-zA-Z0-9]/g,'_');\n        var source = fs.readFileSync(file).toString().trim();\n        if (!source) {\n          log.info('Not parsing empty file \"%s\"', file);\n          return;\n        }\n\n        // if skip empty line option\n        if(options.noempty) {\n          source = source.replace(/^\\s*[\\r\\n]/gm ,\"\");\n        }\n\n        // if begins with shebang\n        if (source[0] === '#' && source[1] === '!') {\n          source = '//' + source;\n        }\n        var report = {\n          info : {\n            file : file,\n            fileShort : fileShort,\n            fileSafe : fileSafe,\n            link : fileDir + '/' + fileSafe + '/index.html'\n          }\n        };\n\n        var error = false;\n        _.each(reporters,function(reporter, name) {\n          if (!flags[name]) return;\n          try {\n            report[name] = reporter.process(source, flags[name], report.info);\n          } catch (e) {\n            error = true;\n            log.error('Error reading file %s: ', file, e.toString());\n            log.error(e.stack);\n          }\n        });\n\n        if (error) return;\n        reports.push(report);\n        if (fileOutputDir) {\n          var outdir = path.join(fileOutputDir, report.info.fileSafe);\n          if (!fs.existsSync(outdir)) fs.mkdirSync(outdir);\n          writeFileReport(outdir, report, source, options);\n        }\n      }\n    });\n    if (done) done();\n  };\n\n  if (!fileOutputDir) {\n    runReports(files,function() {\n      done(reports);\n    });\n  } else {\n    fs.mkdirp(fileOutputDir,function() {\n      runReports(files,function() {\n        var reportFilePrefix = path.join(outputDir, 'report');\n        var overview = path.join(outputDir, 'index.html');\n        var wallDisplay = path.join(outputDir, 'display.html');\n\n        fs.copy(assets, path.join(outputDir, 'assets'), function() {\n          var overviewReport = exports.getOverviewReport(reports);\n          updateHistoricalOverview(reportFilePrefix, overviewReport, options);\n          writeReport(reportFilePrefix, overviewReport);\n          writeOverview(overview, overviewReport, {\n            title : options.title,\n            flags : flags\n          }, overviewTemplate);\n          writeOverview(wallDisplay, overviewReport, {\n            title : options.title,\n            flags : flags\n          }, displayTemplate);\n          done(reports);\n        });\n      });\n    });\n  }\n};\n\n// Filters out information unused in the overview for space/performance\nexports.getOverviewReport = function (reports) {\n  var culledReports = [];\n  var summary = {\n    total : {\n      jshint: 0,\n      sloc : 0,\n      maintainability : 0\n    },\n    average : {\n      sloc : 0,\n      maintainability : 0\n    }\n  };\n\n  reports.forEach(function(report) {\n    // clone objects so we don't have to worry about side effects\n    summary.total.sloc += report.complexity.methodAggregate.sloc.physical;\n    summary.total.maintainability += report.complexity.maintainability;\n\n    var methodAggregate = _.cloneDeep(report.complexity.methodAggregate);\n    var reportItem = {};\n    reportItem.info = report.info;\n    if (report.jshint) {\n      summary.total.jshint += report.jshint.messages.length;\n      reportItem.jshint = {\n        messages : report.jshint.messages.length\n      };\n    }\n    if (report.complexity) {\n      reportItem.complexity = {\n        methodAggregate : methodAggregate,\n        module : report.complexity.module,\n        module_safe : report.complexity.module_safe,\n        maintainability : _.cloneDeep(report.complexity.maintainability)\n      };\n    }\n    culledReports.push(reportItem);\n  });\n\n  summary.average.sloc = ~~(summary.total.sloc / reports.length);\n  summary.average.jshint = (summary.total.jshint / reports.length).toFixed(2);\n  summary.average.maintainability = (summary.total.maintainability / reports.length).toFixed(2);\n\n  return {\n    summary : summary,\n    reports : culledReports\n  };\n};\n\nfunction updateHistoricalOverview(outfilePrefix, overview, options) {\n  var existingData = util.readJSON(outfilePrefix + '.history.json', options) || {};\n  var history = new OverviewHistory(existingData);\n  history.addReport(overview, options.date);\n  writeReport(outfilePrefix + '.history', history.toJSON(), '__history');\n}\n\nfunction updateHistoricalReport(outfilePrefix, overview, options) {\n  var existingData = util.readJSON(outfilePrefix + '.history.json', options) || {};\n  var history = new FileHistory(existingData);\n  overview.date = options.date;\n  history.addReport(overview, options.date);\n  writeReport(outfilePrefix + '.history', history.toJSON(), '__history');\n}\n\n\n\nfunction writeFile(file, source) {\n  log.info('Writing file \"%s\".', file);\n  fs.writeFileSync(file, source, 'utf8');\n}\n\nfunction writeReport(outfilePrefix, report, exportName) {\n  var formatted = util.formatJSON(report);\n\n  writeFile(outfilePrefix + '.json', formatted);\n\n  exportName = exportName || '__report';\n\n  var module = exportName + ' = ' + formatted;\n\n  writeFile(outfilePrefix + '.js', module);\n}\n\nfunction writeOverview(outfile, report, options, templatePath) {\n  var overviewSource = fs.readFileSync(templatePath).toString();\n  var template = _.template(overviewSource);\n  var parsed = template({\n    report : report,\n    options : options\n  });\n  writeFile(outfile, parsed);\n}\n\nfunction writeFileReport(outdir, report, source, options) {\n  var overviewSource = fs.readFileSync(fileTemplate).toString();\n  var parsed = _.template(overviewSource)({\n    source : util.escapeHTML(source),\n    report : report\n  });\n  var indexPath = path.join(outdir,'index.html');\n  var outfilePrefix = path.join(outdir,'report');\n\n  writeFile(indexPath, parsed);\n  updateHistoricalReport(outfilePrefix, report, options);\n  writeReport(outfilePrefix, report);\n}\n","/home/travis/build/npmtest/node-npmtest-plato/node_modules/plato/lib/util.js":"'use strict';\n\n// node api\nvar fs = require('fs');\n\n// local lib\nvar Logger = require('./logger');\n\nvar log = new Logger(Logger.WARNING);\n\nvar path = require('path');\n\nexports.findCommonBase = function(files) {\n  if (!files || files.length === 1) return '';\n  var lastSlash = files[0].lastIndexOf(path.sep);\n  if (!lastSlash) return '';\n  var first = files[0].substr(0, lastSlash + 1);\n  var prefixlen = first.length;\n  files.forEach(function(file){\n    for (var i = prefixlen; i > 0; i--) {\n      if (file.substr(0,i) === first.substr(0,i)) {\n        prefixlen = i;\n        return;\n      }\n    }\n    prefixlen = 0;\n  });\n  return first.substr(0,prefixlen);\n};\n\nexports.formatJSON = function (report) {\n  return JSON.stringify(report, function(k,v){\n    if (k === 'identifiers') return ['__stripped__'];\n    return v;\n  });\n};\n\nexports.readJSON = function (file, options) {\n  if (options.q) log.level = Logger.ERROR;\n  var result = {};\n  if (fs.existsSync(file)) {\n    log.debug('Parsing JSON from file %s', file);\n    try {\n      var src = fs.readFileSync(file);\n      result = JSON.parse(src);\n    } catch(e) {\n      log.warning('Could not parse JSON from file %s', file);\n    }\n  } else {\n    log.info('Not parsing missing file \"%s\"', file);\n  }\n  return result;\n};\n\nexports.stripComments = function (str) {\n  /*jshint regexp:false */\n  str = str || '';\n\n  var multiline = /\\/\\*(?:(?!\\*\\/)|.|\\n)*?\\*\\//g;\n  var singleline = /\\/\\/.*/g;\n\n  return str.replace(multiline, '').replace(singleline, '');\n};\n\n// http://stackoverflow.com/a/4835406/338762\nexports.escapeHTML = function (html) {\n  return html\n      .replace(/&/g, \"&amp;\")\n      .replace(/</g, \"&lt;\")\n      .replace(/>/g, \"&gt;\")\n      .replace(/\"/g, \"&quot;\")\n      .replace(/'/g, \"&#039;\");\n};\n","/home/travis/build/npmtest/node-npmtest-plato/node_modules/plato/lib/logger.js":"\n\"use strict\";\n\nmodule.exports = Logger;\n\nfunction Logger(level) {\n  this.level = level;\n}\n\nvar levels = [\n  'TRACE',\n  'DEBUG',\n  'INFO',\n  'WARNING',\n  'ERROR'\n];\n\nlevels.forEach(function(level, i){\n  Logger[level] = i;\n  Logger.prototype[level.toLowerCase()] = function() {\n    if (i >= this.level) console.log.apply(console,arguments);\n  };\n});\n","/home/travis/build/npmtest/node-npmtest-plato/node_modules/plato/lib/models/OverviewHistory.js":"\n'use strict';\n\n// local lib\nvar History = require('./History');\n\nmodule.exports = OverviewHistory;\n\nfunction OverviewHistory(data) {\n  History.call(this, data);\n}\n\nOverviewHistory.prototype = Object.create(History.prototype);\n\nOverviewHistory.prototype.addReport = function(report, date) {\n  date = date || report.date || new Date().toUTCString();\n  this.push({\n    date : date,\n    total : {\n      sloc : report.summary.total.sloc,\n      maintainability: report.summary.total.maintainability\n    },\n    average : {\n      sloc : report.summary.average.sloc,\n      maintainability: report.summary.average.maintainability\n    }\n  });\n  return this;\n};\n\n","/home/travis/build/npmtest/node-npmtest-plato/node_modules/plato/lib/models/History.js":"\n'use strict';\n\nvar _ = require('lodash');\n\nmodule.exports = History;\n\nfunction History(data) {\n  this.length = 0;\n  if (data && data.length) {\n    // using lodash to catch array-like objects\n    _.each(data, function(record, index){\n      this[index] = _.cloneDeep(record);\n    }.bind(this));\n    this.length = data.length;\n  }\n}\n\nHistory.prototype.push = function(obj) {\n  this[this.length] = obj;\n  this.length++;\n};\n\nHistory.prototype.toJSON = function() {\n  var obj = [];\n  _.each(this, function(val,index){\n    obj[index] = _.cloneDeep(val);\n  }.bind(this));\n  return obj;\n};\n","/home/travis/build/npmtest/node-npmtest-plato/node_modules/plato/lib/models/FileHistory.js":"\n'use strict';\n\nvar History = require('./History');\n\nmodule.exports = FileHistory;\n\nfunction FileHistory(data) {\n  History.call(this, data);\n}\n\nFileHistory.prototype = Object.create(History.prototype);\n\n\nFileHistory.prototype.addReport = function(report, date) {\n  date = date || report.date || new Date().toUTCString();\n  this.push({\n    date : date,\n    sloc : report.complexity.methodAggregate.sloc.physical,\n    lloc : report.complexity.methodAggregate.sloc.logical,\n    functions : report.complexity.methods.length,\n    deliveredBugs : report.complexity.methodAggregate.halstead.bugs,\n    difficulty: report.complexity.methodAggregate.halstead.difficulty,\n    maintainability: report.complexity.maintainability,\n    lintErrors : (report.jshint && report.jshint.messages.length) || []\n  });\n  return this;\n};\n\n","/home/travis/build/npmtest/node-npmtest-plato/node_modules/plato/lib/reporters/complexity/index.js":"'use strict';\n\nvar escomplex = require('typhonjs-escomplex'),\n    _         = require('lodash');\n\nexports.process = function(source, options, reportInfo) {\n\n  var report = escomplex.analyzeModule(source, options);\n  // Make the short filename easily accessible\n  report.module = reportInfo.fileShort;\n\n  // `typhonjs-escomplex` stores class methods inside `classes` entries. For now this is a hack to add class methods\n  // to the end of module methods. Plato needs to be updated to support classes.\n  if (_.isArray(report.methods) && _.isArray(report.classes)) {\n    _.each(report.classes, function (clazz) {\n      _.each(clazz.methods, function (method) {\n        report.methods.push(method);\n      });\n    });\n  }\n\n  return report;\n};\n","/home/travis/build/npmtest/node-npmtest-plato/node_modules/plato/lib/reporters/jshint/index.js":"\"use strict\";\n\nvar JSHINT = require(\"jshint\").JSHINT;\nvar jsHintCli = require(\"jshint/src/cli.js\");\n\n// Provides a regexp to test for ES6 / ES Modules. If the pass tests then esversion is set to 6 if not already specified.\nvar esmRegex = /(^\\s*|[}\\);\\n]\\s*)(import\\s*(['\"]|(\\*\\s+as\\s+)?[^\"'\\(\\)\\n;]+\\s*from\\s*['\"]|\\{)|export\\s+\\*\\s+from\\s+[\"']|export\\s* (\\{|default|function|class|var|const|let|async\\s+function))/;\n\nexports.process = function (source, options/*, reportInfo */) {\n  if (options == null || Object.getOwnPropertyNames(options).length === 0) {\n    options = { options : {}, globals : {}};\n    var jsHintOptions = jsHintCli.getConfig(source);\n\n    delete jsHintOptions.dirname;\n    if (jsHintOptions != null && Object.getOwnPropertyNames(jsHintOptions).length > 0) {\n      if (jsHintOptions.globals) {\n        options.globals = jsHintOptions.globals;\n        delete jsHintOptions.globals;\n      }\n      options.options = jsHintOptions;\n    }\n  }\n\n  // Detect if source is an ES Module.\n  if (esmRegex.test(source)) {\n    // Make sure `options.options` is defined\n    if (typeof options.options !== 'object') {\n      options.options = {};\n    }\n\n    // If esversion is not already specified then set `esversion` to 6.\n    if (typeof options.options.esversion !== 'number') {\n      options.options.esversion = 6;\n    }\n  }\n\n  var results = lint(source, options.options, options.globals);\n\n  return generateReport(results);\n};\n\nfunction generateReport(data) {\n\n  var out = {\n    messages : []\n  };\n\n  data.results.forEach(function (result) {\n    out.messages.push({\n      severity : 'error',\n      line     : result.error.line,\n      column   : result.error.character,\n      message  : result.error.reason,\n      source   : result.error.raw\n    });\n  });\n\n  return out;\n}\n\nfunction lint(source, config, globals) {\n  config = config || {};\n\n  var results = [];\n  var data = [];\n\n  // Remove potential Unicode BOM.\n  source = source.replace(/^\\uFEFF/, \"\");\n  if (!JSHINT(source, config, globals)) {\n    JSHINT.errors.forEach(function (err) {\n      if (err) results.push({ error: err });\n    });\n  }\n\n  var lintData = JSHINT.data();\n  if (lintData) data.push(lintData);\n\n  return {\n    results : results,\n    data : data\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-plato/node_modules/plato/lib/reporters/eslint/index.js":"\"use strict\";\n\nvar ESLINT = require(\"eslint\");\n\nexports.process = function (source, options/*, reportInfo */) {\n  var results = lint(source, options);\n  var report = generateReport(results);\n  return report;\n};\n\nfunction generateReport(data) {\n\n  var out = {\n    messages : []\n  };\n\n  data.results.forEach(function (result) {\n    out.messages.push({\n      severity : 'error',\n      line     : result.line,\n      column   : result.column,\n      message  : result.message,\n      source   : result.source\n    });\n  });\n\n  return out;\n}\n\nfunction lint(source, config) {\n  config = config || {};\n\n  var results = [];\n  var data = [];\n\n  // Remove potential Unicode BOM.\n  source = source.replace(/^\\uFEFF/, \"\");\n\n  var messages = ESLINT.linter.verify(source, config);\n  results = results.concat(messages);\n\n  return {\n    results : results,\n    data : data\n  };\n}\n\n","/home/travis/build/npmtest/node-npmtest-plato/node_modules/plato/Gruntfile.js":"'use strict';\n\nmodule.exports = function(grunt) {\n\n  // Project configuration.\n  grunt.initConfig({\n    nodeunit: {\n      files: ['test/**/*_test.js']\n    },\n    jshint: {\n      options: {\n        jshintrc: '.jshintrc'\n      },\n      gruntfile: {\n        src: 'Gruntfile.js'\n      },\n      lib: {\n        src: ['lib/**/*.js', '!lib/assets/**/*.js']\n      },\n      test: {\n        src: ['test/**/*.js','!test/fixtures/**/*.js']\n      },\n      assets: {\n        src: ['lib/assets/scripts/*.js']\n      }\n    },\n    uglify: {\n      'assets' : {\n        files : {\n          'lib/assets/scripts/bundles/core-bundle.js' : [\n            'lib/assets/scripts/vendor/jquery-1.8.3.min.js',\n            'lib/assets/scripts/vendor/lodash.min.js',\n            'lib/assets/scripts/vendor/raphael-min.js',\n            'lib/assets/scripts/vendor/morris.min.js',\n            'lib/assets/scripts/vendor/jquery.fittext.js',\n            'lib/assets/scripts/vendor/bootstrap-tooltip.js',\n            'lib/assets/scripts/vendor/bootstrap-popover.js'\n          ],\n          'lib/assets/scripts/bundles/codemirror.js' : [\n            'lib/assets/scripts/vendor/codemirror/codemirror.js',\n            'lib/assets/scripts/vendor/codemirror/javascript.js',\n            'lib/assets/scripts/vendor/codemirror/util/searchcursor.js'\n          ]\n        }\n      }\n    },\n    watch: {\n      gruntfile: {\n        files: '<%= jshint.gruntfile.src %>',\n        tasks: ['jshint:gruntfile']\n      },\n      lib: {\n        files: '<%= jshint.lib.src %>',\n        tasks: ['jshint:lib', 'nodeunit']\n      },\n      test: {\n        files: '<%= jshint.test.src %>',\n        tasks: ['jshint:test', 'nodeunit']\n      }\n    },\n    casper : {\n      test: {\n        files: {\n          'reports/casper.xml': [\n            'test/casper-overview.js',\n            'test/casper-sortable-file-list.js'\n          ],\n        },\n        options : {\n          test: true,\n          verbose: true,\n          'fail-fast': true,\n          'log-level': 'error',\n          concise: true,\n          parallel : false,\n          concurrency : 2\n        }\n      }\n    }\n  });\n\n  grunt.loadNpmTasks('grunt-contrib-jshint');\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\n  grunt.loadNpmTasks('grunt-contrib-uglify');\n  grunt.loadNpmTasks('grunt-contrib-watch');\n  grunt.loadNpmTasks('grunt-casper');\n\n  grunt.registerTask('runtest',function(){\n    var done = this.async();\n\n    grunt.util.spawn({\n        cmd : './bin/plato',\n        args : [\n          '-q',\n          '-dtmp',\n          '-ttest report',\n          'test/fixtures/a.js','test/fixtures/b.js','test/fixtures/c-es6.js','test/fixtures/d-es6.js','test/fixtures/empty.js'\n        ]\n      },\n      function(err, result, code){\n        console.log(result.stdout);\n        console.log(result.stderr);\n        if (err || code !== 0) {\n          grunt.fatal('Running plato binary failed');\n        }\n        done();\n      }\n    );\n  });\n\n  grunt.registerTask('runbin',function(){\n    var done = this.async();\n\n    grunt.util.spawn({\n        cmd : './bin/plato',\n        args : [\n          '-q',\n          '-r',\n          '-l.jshintrc',\n          '-xvendor|bundles',\n          '-dreports',\n          '-tPlato report',\n          'lib/'\n        ]\n      },\n      function(err, result, code){\n        console.log(result.stdout);\n        if (err || code !== 0) {\n          console.log(err);\n          grunt.fatal('Running plato binary failed');\n        }\n        done();\n      }\n    );\n  });\n\n  grunt.registerTask('optimize', ['uglify']);\n  // Default task.\n  grunt.registerTask('test', ['jshint', 'nodeunit', 'runtest', 'runbin', 'casper']);\n  grunt.registerTask('default', ['test']);\n\n};\n","/home/travis/build/npmtest/node-npmtest-plato/node_modules/plato/lib/cli.js":"'use strict';\n\n// Node api\nvar fs = require('fs');\n\n// External libs.\nvar getopt = require('posix-getopt');\n\n// Local lib\nvar plato = require('./plato'),\n    info = require('./info'),\n    util = require('./util');\n\nexports.exec = function(options, done) {\n  if (typeof options === 'function') {\n    done = options;\n    options = undefined;\n  }\n\n  if (options) {\n    Object.keys(options).forEach(function(key) {\n      if (!(key in exports.args)) exports.args[key] = options[key];\n    });\n  }\n\n  var files     = exports.args.files;\n  var outputDir = exports.args.d.value;\n  var platoOptions = {\n    recurse : !!exports.args.r,\n    q: !!exports.args.q,\n    title : exports.args.t && exports.args.t.value,\n    exclude : exports.args.x && new RegExp(exports.args.x.value),\n    date : exports.args.D && exports.args.D.value\n  };\n  var json;\n  var jshintrc = {};\n\n  if (exports.args.l) {\n    if (typeof exports.args.l.value === 'string') {\n      json = fs.readFileSync(exports.args.l.value).toString();\n      jshintrc = JSON.parse(util.stripComments(json));\n    }\n    platoOptions.jshint = { globals : jshintrc.globals || {} };\n    delete jshintrc.globals;\n    platoOptions.jshint.options = jshintrc;\n\n  } else if (exports.args.e) {\n    json = fs.readFileSync(exports.args.e.value).toString();\n    jshintrc = JSON.parse(util.stripComments(json));\n    platoOptions.eslint = jshintrc;\n  }\n\n  plato.inspect(files, outputDir, platoOptions, done);\n};\n\nexports.options = require('./cli/options');\n\nexports.args = parseArgs(exports.options);\n\n\nfunction parseArgs(options) {//  \\/\\\\*(?:(?!\\\\*\\/)|.|\\\\n)*?\\\\*\\/\n  var optionString = '',\n      required = [],\n      modal = false;\n\n  Object.keys(options).forEach(function(option){\n    var def = options[option];\n    optionString += option;\n    if (def.type === 'String') optionString += ':';\n    if (def.long) optionString += '(' + def.long + ')';\n    if (def.required) required.push(option);\n  });\n\n  var parser = new getopt.BasicParser(optionString, process.argv);\n  var args = {}, option;\n\n  while ((option = parser.getopt())) {\n    var arg = args[option.option] || { count : 0};\n    arg.count++;\n    arg.value = option.optarg || true;\n\n    args[option.option] = arg;\n\n    if (options[option.option].modal) {\n      modal = true;\n    }\n  }\n\n  if (!modal) {\n    required.forEach(function(option) {\n      if (!args[option] || !args[option].value) {\n        console.log(\"Must specify a value for option %s (%s : %s)\", option, options[option].long, options[option].desc);\n        info.help();\n        process.exit(1);\n      }\n    });\n  }\n\n  // what's left in argv\n  args.files = process.argv.slice(parser.optind());\n  return args;\n}\n","/home/travis/build/npmtest/node-npmtest-plato/node_modules/plato/lib/info.js":"'use strict';\n\n// Project metadata.\nvar pkg = require('../package.json'),\n    options = require('./cli/options.json');\n\nexports.name = pkg.name;\n\nexports.version = function() {\n  console.log(pkg.version);\n};\n\nexports.help = function() {\n  console.log('\\nUsage : %s [options] file1.js file2.js ... fileN.js', pkg.name);\n  Object.keys(options).forEach(function(shortOption){\n    var option = options[shortOption];\n    console.log(\n      '  -%s%s%s%s',\n      shortOption,\n      option.long ? ', --' + option.long : '',\n      option.type !== 'Boolean' ? ' : ' + option.type : '',\n      option.required ? ' *required*' : ''\n    );\n    console.log('      %s', option.desc);\n  });\n};\n"}